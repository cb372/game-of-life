// Generated by purs bundle 0.11.7
var PS = {};
(function(exports) {
    "use strict";

  exports.arrayApply = function (fs) {
    return function (xs) {
      var l = fs.length;
      var k = xs.length;
      var result = new Array(l*k);
      var n = 0;
      for (var i = 0; i < l; i++) {
        var f = fs[i];
        for (var j = 0; j < k; j++) {
          result[n++] = f(xs[j]);
        }
      }
      return result;
    };
  };
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  var composeFlipped = function (dictSemigroupoid) {
      return function (f) {
          return function (g) {
              return compose(dictSemigroupoid)(g)(f);
          };
      };
  };
  exports["compose"] = compose;
  exports["Semigroupoid"] = Semigroupoid;
  exports["composeFlipped"] = composeFlipped;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS["Control.Semigroupoid"] = PS["Control.Semigroupoid"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Category = function (Semigroupoid0, id) {
      this.Semigroupoid0 = Semigroupoid0;
      this.id = id;
  };
  var id = function (dict) {
      return dict.id;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["Category"] = Category;
  exports["id"] = id;
  exports["categoryFn"] = categoryFn;
})(PS["Control.Category"] = PS["Control.Category"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Category = PS["Control.Category"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
    "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
    "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Show"];     
  var Show = function (show) {
      this.show = show;
  }; 
  var show = function (dict) {
      return dict.show;
  };
  exports["Show"] = Show;
  exports["show"] = show;
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  exports["unit"] = $foreign.unit;
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];        
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };                                                                                             
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["functorArray"] = functorArray;
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];        
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  }; 
  var applyArray = new Apply(function () {
      return Data_Functor.functorArray;
  }, $foreign.arrayApply);
  var apply = function (dict) {
      return dict.apply;
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applyArray"] = applyArray;
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
})(PS["Control.Applicative"] = PS["Control.Applicative"] || {});
(function(exports) {
    "use strict";

  exports.arrayBind = function (arr) {
    return function (f) {
      var result = [];
      for (var i = 0, l = arr.length; i < l; i++) {
        Array.prototype.push.apply(result, f(arr[i]));
      }
      return result;
    };
  };
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  }; 
  var bindArray = new Bind(function () {
      return Control_Apply.applyArray;
  }, $foreign.arrayBind);
  var bind = function (dict) {
      return dict.bind;
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["bindArray"] = bindArray;
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
    "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS["Control.Monad"] = PS["Control.Monad"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var monadEff = new Control_Monad.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Control_Bind.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Control_Apply.Apply(function () {
      return functorEff;
  }, Control_Monad.ap(monadEff));
  var applicativeEff = new Control_Applicative.Applicative(function () {
      return applyEff;
  }, $foreign.pureE);
  var functorEff = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
    "use strict";

  exports.toNumber = function (n) {
    return n;
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
    "use strict";

  exports.refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Eq"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Eq = function (eq) {
      this.eq = eq;
  };                                    
  var eqInt = new Eq($foreign.refEq);
  var eq = function (dict) {
      return dict.eq;
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["eqInt"] = eqInt;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
    "use strict";

  exports.unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
    "use strict";

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Semigroup = function (append) {
      this.append = append;
  };                                                         
  var semigroupArray = new Semigroup($foreign.concatArray);
  var append = function (dict) {
      return dict.append;
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["semigroupArray"] = semigroupArray;
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];        
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
})(PS["Data.Ordering"] = PS["Data.Ordering"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];        
  var unsafeCompare = $foreign.unsafeCompareImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value);
  exports["unsafeCompare"] = unsafeCompare;
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
    "use strict";

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];        
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };
  var zero = function (dict) {
      return dict.zero;
  };                                                                            
  var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
  var one = function (dict) {
      return dict.one;
  };
  var mul = function (dict) {
      return dict.mul;
  };
  var add = function (dict) {
      return dict.add;
  };
  exports["Semiring"] = Semiring;
  exports["add"] = add;
  exports["zero"] = zero;
  exports["mul"] = mul;
  exports["one"] = one;
  exports["semiringInt"] = semiringInt;
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Ord"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Ord_Unsafe = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Ord = function (Eq0, compare) {
      this.Eq0 = Eq0;
      this.compare = compare;
  };                                
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, Data_Ord_Unsafe.unsafeCompare);
  var compare = function (dict) {
      return dict.compare;
  };
  var greaterThan = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var v = compare(dictOrd)(a1)(a2);
              if (v instanceof Data_Ordering.GT) {
                  return true;
              };
              return false;
          };
      };
  };
  var lessThan = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var v = compare(dictOrd)(a1)(a2);
              if (v instanceof Data_Ordering.LT) {
                  return true;
              };
              return false;
          };
      };
  };
  var between = function (dictOrd) {
      return function (low) {
          return function (hi) {
              return function (x) {
                  if (lessThan(dictOrd)(x)(low)) {
                      return false;
                  };
                  if (greaterThan(dictOrd)(x)(hi)) {
                      return false;
                  };
                  return true;
              };
          };
      };
  };
  exports["Ord"] = Ord;
  exports["compare"] = compare;
  exports["lessThan"] = lessThan;
  exports["greaterThan"] = greaterThan;
  exports["between"] = between;
  exports["ordInt"] = ordInt;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Function = PS["Data.Function"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Monoid = function (Semigroup0, mempty) {
      this.Semigroup0 = Semigroup0;
      this.mempty = mempty;
  };       
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 219, column 1 - line 219, column 51: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Int"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_DivisionRing = PS["Data.DivisionRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Field = PS["Data.Field"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Global = PS["Global"];
  var $$Math = PS["Math"];
  var Prelude = PS["Prelude"];
  exports["toNumber"] = $foreign.toNumber;
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
    "use strict";

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Extending arrays ------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.cons = function (e) {
    return function (l) {
      return [e].concat(l);
    };
  };

  exports.snoc = function (l) {
    return function (e) {
      var l1 = l.slice();
      l1.push(e);
      return l1;
    };
  };

  exports.concat = function (xss) {
    if (xss.length <= 10000) {
      // This method is faster, but it crashes on big arrays.
      // So we use it when can and fallback to simple variant otherwise.
      return Array.prototype.concat.apply([], xss);
    }

    var result = [];
    for (var i = 0, l = xss.length; i < l; i++) {
      var xs = xss[i];
      for (var j = 0, m = xs.length; j < m; j++) {
        result.push(xs[j]);
      }
    }
    return result;
  };

  exports.filter = function (f) {
    return function (xs) {
      return xs.filter(f);
    };
  };

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };

  exports.drop = function (n) {
    return function (l) {
      return n < 1 ? l : l.slice(n);
    };
  };

  //------------------------------------------------------------------------------
  // Partial ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.unsafeIndexImpl = function (xs) {
    return function (n) {
      return xs[n];
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
    "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Prelude = PS["Prelude"];        
  var Newtype = function (unwrap, wrap) {
      this.unwrap = unwrap;
      this.wrap = wrap;
  };
  var wrap = function (dict) {
      return dict.wrap;
  };
  var unwrap = function (dict) {
      return dict.unwrap;
  };
  var un = function (dictNewtype) {
      return function (v) {
          return unwrap(dictNewtype);
      };
  };
  exports["unwrap"] = unwrap;
  exports["wrap"] = wrap;
  exports["Newtype"] = Newtype;
  exports["un"] = un;
})(PS["Data.Newtype"] = PS["Data.Newtype"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var Additive = function (x) {
      return x;
  };
  var semigroupAdditive = function (dictSemiring) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_Semiring.add(dictSemiring)(v)(v1);
          };
      });
  };
  var newtypeAdditive = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Additive);
  var monoidAdditive = function (dictSemiring) {
      return new Data_Monoid.Monoid(function () {
          return semigroupAdditive(dictSemiring);
      }, Data_Semiring.zero(dictSemiring));
  };
  exports["Additive"] = Additive;
  exports["newtypeAdditive"] = newtypeAdditive;
  exports["semigroupAdditive"] = semigroupAdditive;
  exports["monoidAdditive"] = monoidAdditive;
})(PS["Data.Monoid.Additive"] = PS["Data.Monoid.Additive"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var foldl = function (dict) {
      return dict.foldl;
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  exports["Foldable"] = Foldable;
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["foldMap"] = foldMap;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["foldableArray"] = foldableArray;
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
    "use strict";

  // jshint maxparams: 3

  exports.traverseArrayImpl = function () {
    function Cont(fn) {
      this.fn = fn;
    }

    var emptyList = {};

    var ConsCell = function (head, tail) {
      this.head = head;
      this.tail = tail;
    };

    function consList(x) {
      return function (xs) {
        return new ConsCell(x, xs);
      };
    }

    function listToArray(list) {
      var arr = [];
      var xs = list;
      while (xs !== emptyList) {
        arr.push(xs.head);
        xs = xs.tail;
      }
      return arr;
    }

    return function (apply) {
      return function (map) {
        return function (pure) {
          return function (f) {
            var buildFrom = function (x, ys) {
              return apply(map(consList)(f(x)))(ys);
            };

            var go = function (acc, currentLen, xs) {
              if (currentLen === 0) {
                return acc;
              } else {
                var last = xs[currentLen - 1];
                return new Cont(function () {
                  return go(buildFrom(last, acc), currentLen - 1, xs);
                });
              }
            };

            return function (array) {
              var result = go(pure(emptyList), array.length, array);
              while (result instanceof Cont) {
                result = result.fn();
              }

              return map(listToArray)(result);
            };
          };
        };
      };
    };
  }();
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Traversable"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Traversable_Accum = PS["Data.Traversable.Accum"];
  var Data_Traversable_Accum_Internal = PS["Data.Traversable.Accum.Internal"];
  var Prelude = PS["Prelude"];        
  var Traversable = function (Foldable1, Functor0, sequence, traverse) {
      this.Foldable1 = Foldable1;
      this.Functor0 = Functor0;
      this.sequence = sequence;
      this.traverse = traverse;
  };
  var traverse = function (dict) {
      return dict.traverse;
  }; 
  var sequenceDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return traverse(dictTraversable)(dictApplicative)(Control_Category.id(Control_Category.categoryFn));
      };
  };
  var traversableArray = new Traversable(function () {
      return Data_Foldable.foldableArray;
  }, function () {
      return Data_Functor.functorArray;
  }, function (dictApplicative) {
      return sequenceDefault(traversableArray)(dictApplicative);
  }, function (dictApplicative) {
      return $foreign.traverseArrayImpl(Control_Apply.apply(dictApplicative.Apply0()))(Data_Functor.map((dictApplicative.Apply0()).Functor0()))(Control_Applicative.pure(dictApplicative));
  });
  var sequence = function (dict) {
      return dict.sequence;
  };
  exports["Traversable"] = Traversable;
  exports["traverse"] = traverse;
  exports["sequence"] = sequence;
  exports["sequenceDefault"] = sequenceDefault;
  exports["traversableArray"] = traversableArray;
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Distributive = PS["Data.Distributive"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var Type_Equality = PS["Type.Equality"];        
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var functorTuple = new Data_Functor.Functor(function (f) {
      return function (v) {
          return new Tuple(v.value0, f(v.value1));
      };
  });                                                                                                   
  var fst = function (v) {
      return v.value0;
  };
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
  exports["functorTuple"] = functorTuple;
})(PS["Data.Tuple"] = PS["Data.Tuple"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Unfoldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];        
  var Unfoldable = function (unfoldr) {
      this.unfoldr = unfoldr;
  };
  var unfoldr = function (dict) {
      return dict.unfoldr;
  };                                                                                                                                           
  var replicate = function (dictUnfoldable) {
      return function (n) {
          return function (v) {
              var step = function (i) {
                  var $9 = i <= 0;
                  if ($9) {
                      return Data_Maybe.Nothing.value;
                  };
                  return new Data_Maybe.Just(new Data_Tuple.Tuple(v, i - 1 | 0));
              };
              return unfoldr(dictUnfoldable)(step)(n);
          };
      };
  };
  exports["Unfoldable"] = Unfoldable;
  exports["unfoldr"] = unfoldr;
  exports["replicate"] = replicate;
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Array"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array_ST = PS["Data.Array.ST"];
  var Data_Array_ST_Iterator = PS["Data.Array.ST.Iterator"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];                                                        
  var unsafeIndex = function (dictPartial) {
      return $foreign.unsafeIndexImpl;
  };
  var singleton = function (a) {
      return [ a ];
  };
  var concatMap = Data_Function.flip(Control_Bind.bind(Control_Bind.bindArray));
  var mapMaybe = function (f) {
      return concatMap(function ($94) {
          return Data_Maybe.maybe([  ])(singleton)(f($94));
      });
  };
  exports["singleton"] = singleton;
  exports["concatMap"] = concatMap;
  exports["mapMaybe"] = mapMaybe;
  exports["unsafeIndex"] = unsafeIndex;
  exports["length"] = $foreign.length;
  exports["cons"] = $foreign.cons;
  exports["snoc"] = $foreign.snoc;
  exports["filter"] = $foreign.filter;
  exports["slice"] = $foreign.slice;
  exports["drop"] = $foreign.drop;
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Array = PS["Data.Array"];
  var Data_Ring = PS["Data.Ring"];
  var Prelude = PS["Prelude"];        
  var tail = function (dictPartial) {
      return function (xs) {
          return Data_Array.slice(1)(Data_Array.length(xs))(xs);
      };
  };
  var last = function (dictPartial) {
      return function (xs) {
          return xs[Data_Array.length(xs) - 1 | 0];
      };
  };
  var init = function (dictPartial) {
      return function (xs) {
          return Data_Array.slice(0)(Data_Array.length(xs) - 1 | 0)(xs);
      };
  };
  var head = function (dictPartial) {
      return function (xs) {
          return xs[0];
      };
  };
  exports["head"] = head;
  exports["tail"] = tail;
  exports["last"] = last;
  exports["init"] = init;
})(PS["Data.Array.Partial"] = PS["Data.Array.Partial"] || {});
(function(exports) {
    "use strict";

  exports.defer = function () {

    function Defer(thunk) {
      if (this instanceof Defer) {
        this.thunk = thunk;
        return this;
      } else {
        return new Defer(thunk);
      }
    }

    Defer.prototype.force = function () {
      var value = this.thunk();
      this.thunk = null;
      this.force = function () {
        return value;
      };
      return value;
    };

    return Defer;

  }();

  exports.force = function (l) {
    return l.force();
  };
})(PS["Data.Lazy"] = PS["Data.Lazy"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Lazy"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Field = PS["Data.Field"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var functorLazy = new Data_Functor.Functor(function (f) {
      return function (l) {
          return $foreign.defer(function (v) {
              return f($foreign.force(l));
          });
      };
  });
  exports["functorLazy"] = functorLazy;
  exports["defer"] = $foreign.defer;
  exports["force"] = $foreign.force;
})(PS["Data.Lazy"] = PS["Data.Lazy"] || {});
(function(exports) {
    "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Lazy = PS["Data.Lazy"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Measured = function (measure) {
      this.measure = measure;
  }; 
  var measuredElem = new Measured(function (v) {
      return 1;
  });
  var measure = function (dict) {
      return dict.measure;
  };
  var measuredArray = function (dictMonoid) {
      return function (dictMeasured) {
          return new Measured(function (xs) {
              return Data_Foldable.foldl(Data_Foldable.foldableArray)(function (i) {
                  return function (a) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(i)(measure(dictMeasured)(a));
                  };
              })(Data_Monoid.mempty(dictMonoid))(xs);
          });
      };
  };
  var measuredLazy = function (dictMonoid) {
      return function (dictMeasured) {
          return new Measured(function (s) {
              return measure(dictMeasured)(Data_Lazy.force(s));
          });
      };
  };
  var mapmap = function (dictFunctor) {
      return function (dictFunctor1) {
          return function ($73) {
              return Data_Functor.map(dictFunctor)(Data_Functor.map(dictFunctor1)($73));
          };
      };
  };
  var mapmapmap = function (dictFunctor) {
      return function (dictFunctor1) {
          return function (dictFunctor2) {
              return function ($74) {
                  return mapmap(dictFunctor)(dictFunctor1)(Data_Functor.map(dictFunctor2)($74));
              };
          };
      };
  };
  var mapElem = function (dictFunctor) {
      return Unsafe_Coerce.unsafeCoerce;
  };
  var liftElem = Unsafe_Coerce.unsafeCoerce;
  var lift2Elem = Unsafe_Coerce.unsafeCoerce;
  var getElem = function (v) {
      return v;
  };
  var functorElem = new Data_Functor.Functor(function (f) {
      return function (v) {
          return f(v);
      };
  });
  var foldableElem = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return f(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(z)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(v)(z);
          };
      };
  });
  var traversableElem = new Data_Traversable.Traversable(function () {
      return foldableElem;
  }, function () {
      return functorElem;
  }, function (dictApplicative) {
      return function (v) {
          return mapElem((dictApplicative.Apply0()).Functor0())(v);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return mapElem((dictApplicative.Apply0()).Functor0())(f(v));
          };
      };
  });
  exports["mapmap"] = mapmap;
  exports["mapmapmap"] = mapmapmap;
  exports["Measured"] = Measured;
  exports["measure"] = measure;
  exports["getElem"] = getElem;
  exports["mapElem"] = mapElem;
  exports["lift2Elem"] = lift2Elem;
  exports["liftElem"] = liftElem;
  exports["measuredArray"] = measuredArray;
  exports["measuredLazy"] = measuredLazy;
  exports["measuredElem"] = measuredElem;
  exports["foldableElem"] = foldableElem;
  exports["functorElem"] = functorElem;
  exports["traversableElem"] = traversableElem;
})(PS["Data.Sequence.Internal"] = PS["Data.Sequence.Internal"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Array_Partial = PS["Data.Array.Partial"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Sequence_Internal = PS["Data.Sequence.Internal"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var Digit = function (x) {
      return x;
  };
  var traversableDigit = Data_Traversable.traversableArray;
  var runDigit = function (v) {
      return v;
  };
  var tailDigit = function ($14) {
      return Data_Array_Partial.tail()(runDigit($14));
  };
  var overDigit = Unsafe_Coerce.unsafeCoerce;
  var snocDigit = function (dictPartial) {
      return function (dg) {
          return function (x) {
              return overDigit(function (xs) {
                  return Data_Array.snoc(xs)(x);
              })(dg);
          };
      };
  };
  var mkDigitMay = function (xs) {
      var $13 = Data_Ord.between(Data_Ord.ordInt)(1)(4)(Data_Array.length(xs));
      if ($13) {
          return new Data_Maybe.Just(xs);
      };
      return Data_Maybe.Nothing.value;
  };
  var mkDigit3 = function (x) {
      return function (y) {
          return function (z) {
              return [ x, y, z ];
          };
      };
  };
  var mkDigit2 = function (x) {
      return function (y) {
          return [ x, y ];
      };
  };
  var mkDigit1 = function (x) {
      return [ x ];
  };
  var mkDigit = function (dictPartial) {
      return Digit;
  };
  var measuredDigit = function (dictMonoid) {
      return function (dictMeasured) {
          return new Data_Sequence_Internal.Measured(function ($15) {
              return Data_Sequence_Internal.measure(Data_Sequence_Internal.measuredArray(dictMonoid)(dictMeasured))(runDigit($15));
          });
      };
  };
  var lastDigit = function ($16) {
      return Data_Array_Partial.last()(runDigit($16));
  };
  var initDigit = function ($17) {
      return Data_Array_Partial.init()(runDigit($17));
  };
  var headDigit = function ($18) {
      return Data_Array_Partial.head()(runDigit($18));
  };
  var functorDigit = Data_Functor.functorArray;
  var foldableDigit = Data_Foldable.foldableArray;
  var digitLength = function ($20) {
      return Data_Array.length(runDigit($20));
  };
  var consDigit = function (dictPartial) {
      return function (x) {
          return function (dg) {
              return overDigit(Data_Array.cons(x))(dg);
          };
      };
  };
  exports["mkDigit"] = mkDigit;
  exports["mkDigitMay"] = mkDigitMay;
  exports["mkDigit1"] = mkDigit1;
  exports["mkDigit2"] = mkDigit2;
  exports["mkDigit3"] = mkDigit3;
  exports["runDigit"] = runDigit;
  exports["headDigit"] = headDigit;
  exports["tailDigit"] = tailDigit;
  exports["initDigit"] = initDigit;
  exports["lastDigit"] = lastDigit;
  exports["snocDigit"] = snocDigit;
  exports["consDigit"] = consDigit;
  exports["digitLength"] = digitLength;
  exports["functorDigit"] = functorDigit;
  exports["foldableDigit"] = foldableDigit;
  exports["traversableDigit"] = traversableDigit;
  exports["measuredDigit"] = measuredDigit;
})(PS["Data.FingerTree.Digit"] = PS["Data.FingerTree.Digit"] || {});
(function(exports) {
    "use strict";

  // module Partial

  exports.crashWith = function () {
    return function (msg) {
      throw new Error(msg);
    };
  };
})(PS["Partial"] = PS["Partial"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Partial"];
  exports["crashWith"] = $foreign.crashWith;
})(PS["Partial"] = PS["Partial"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Array = PS["Data.Array"];
  var Data_Eq = PS["Data.Eq"];
  var Data_FingerTree_Digit = PS["Data.FingerTree.Digit"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Lazy = PS["Data.Lazy"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Sequence_Internal = PS["Data.Sequence.Internal"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial = PS["Partial"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];        
  var NilR = (function () {
      function NilR() {

      };
      NilR.value = new NilR();
      return NilR;
  })();
  var SnocR = (function () {
      function SnocR(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SnocR.create = function (value0) {
          return function (value1) {
              return new SnocR(value0, value1);
          };
      };
      return SnocR;
  })();
  var NilL = (function () {
      function NilL() {

      };
      NilL.value = new NilL();
      return NilL;
  })();
  var ConsL = (function () {
      function ConsL(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ConsL.create = function (value0) {
          return function (value1) {
              return new ConsL(value0, value1);
          };
      };
      return ConsL;
  })();
  var Split = (function () {
      function Split(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Split.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Split(value0, value1, value2);
              };
          };
      };
      return Split;
  })();
  var Node2 = (function () {
      function Node2(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Node2.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Node2(value0, value1, value2);
              };
          };
      };
      return Node2;
  })();
  var Node3 = (function () {
      function Node3(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Node3.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Node3(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Node3;
  })();
  var LazySplit = (function () {
      function LazySplit(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      LazySplit.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new LazySplit(value0, value1, value2);
              };
          };
      };
      return LazySplit;
  })();
  var Empty = (function () {
      function Empty() {

      };
      Empty.value = new Empty();
      return Empty;
  })();
  var Single = (function () {
      function Single(value0) {
          this.value0 = value0;
      };
      Single.create = function (value0) {
          return new Single(value0);
      };
      return Single;
  })();
  var Deep = (function () {
      function Deep(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Deep.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Deep(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Deep;
  })();
  var splitDigit = function (dictMonoid) {
      return function (dictMeasured) {
          return function (p) {
              return function (i) {
                  return function (as) {
                      var v = Data_FingerTree_Digit.digitLength(as);
                      if (v === 1) {
                          return new Split([  ], Data_FingerTree_Digit.headDigit(as), [  ]);
                      };
                      var bs$prime = Data_FingerTree_Digit.tailDigit(as);
                      var bs = Data_FingerTree_Digit.mkDigit()(bs$prime);
                      var a = Data_FingerTree_Digit.headDigit(as);
                      var i$prime = Data_Semigroup.append(dictMonoid.Semigroup0())(i)(Data_Sequence_Internal.measure(dictMeasured)(a));
                      var $150 = p(i$prime);
                      if ($150) {
                          return new Split([  ], a, bs$prime);
                      };
                      var v1 = splitDigit(dictMonoid)(dictMeasured)(p)(i$prime)(bs);
                      return new Split(Data_Array.cons(a)(v1.value0), v1.value1, v1.value2);
                  };
              };
          };
      };
  };
  var nodeToDigit = (function () {
      var go = function (v) {
          if (v instanceof Node2) {
              return Data_FingerTree_Digit.mkDigit2(v.value1)(v.value2);
          };
          if (v instanceof Node3) {
              return Data_FingerTree_Digit.mkDigit3(v.value1)(v.value2)(v.value3);
          };
          throw new Error("Failed pattern match at Data.FingerTree line 89, column 3 - line 89, column 34: " + [ v.constructor.name ]);
      };
      return go;
  })();
  var node3 = function (dictMonoid) {
      return function (dictMeasured) {
          return function (a) {
              return function (b) {
                  return function (c) {
                      return new Node3(Data_Semigroup.append(dictMonoid.Semigroup0())(Data_Sequence_Internal.measure(dictMeasured)(a))(Data_Semigroup.append(dictMonoid.Semigroup0())(Data_Sequence_Internal.measure(dictMeasured)(b))(Data_Sequence_Internal.measure(dictMeasured)(c))), a, b, c);
                  };
              };
          };
      };
  };
  var node2 = function (dictMonoid) {
      return function (dictMeasured) {
          return function (a) {
              return function (b) {
                  return new Node2(Data_Semigroup.append(dictMonoid.Semigroup0())(Data_Sequence_Internal.measure(dictMeasured)(a))(Data_Sequence_Internal.measure(dictMeasured)(b)), a, b);
              };
          };
      };
  };
  var nodes = function (dictMonoid) {
      return function (dictMeasured) {
          return function (xs) {
              if (xs.length === 2) {
                  return [ node2(dictMonoid)(dictMeasured)(xs[0])(xs[1]) ];
              };
              if (xs.length === 3) {
                  return [ node3(dictMonoid)(dictMeasured)(xs[0])(xs[1])(xs[2]) ];
              };
              if (xs.length === 4) {
                  return [ node2(dictMonoid)(dictMeasured)(xs[0])(xs[1]), node2(dictMonoid)(dictMeasured)(xs[2])(xs[3]) ];
              };
              var idx = Data_Array.unsafeIndex();
              return Data_Array.cons(node3(dictMonoid)(dictMeasured)(idx(xs)(0))(idx(xs)(1))(idx(xs)(2)))(nodes(dictMonoid)(dictMeasured)(Data_Array.drop(3)(xs)));
          };
      };
  };
  var measuredNode = new Data_Sequence_Internal.Measured(function (v) {
      if (v instanceof Node2) {
          return v.value0;
      };
      if (v instanceof Node3) {
          return v.value0;
      };
      throw new Error("Failed pattern match at Data.FingerTree line 108, column 1 - line 108, column 47: " + [ v.constructor.name ]);
  });
  var measuredFingerTree = function (dictMonoid) {
      return function (dictMeasured) {
          return new Data_Sequence_Internal.Measured(function (v) {
              if (v instanceof Empty) {
                  return Data_Monoid.mempty(dictMonoid);
              };
              if (v instanceof Single) {
                  return Data_Sequence_Internal.measure(dictMeasured)(v.value0);
              };
              if (v instanceof Deep) {
                  return Data_Lazy.force(v.value0);
              };
              throw new Error("Failed pattern match at Data.FingerTree line 229, column 1 - line 230, column 59: " + [ v.constructor.name ]);
          });
      };
  };
  var lazyEmpty = Data_Lazy.defer(function (v) {
      return Empty.value;
  });
  var functorNode = new Data_Functor.Functor(function (f) {
      return function (v) {
          if (v instanceof Node2) {
              return new Node2(v.value0, f(v.value1), f(v.value2));
          };
          if (v instanceof Node3) {
              return new Node3(v.value0, f(v.value1), f(v.value2), f(v.value3));
          };
          throw new Error("Failed pattern match at Data.FingerTree line 92, column 1 - line 92, column 41: " + [ f.constructor.name, v.constructor.name ]);
      };
  });
  var functorFingerTree = new Data_Functor.Functor(function (f) {
      return function (v) {
          if (v instanceof Empty) {
              return Empty.value;
          };
          if (v instanceof Single) {
              return new Single(f(v.value0));
          };
          if (v instanceof Deep) {
              return new Deep(v.value0, Data_Functor.map(Data_FingerTree_Digit.functorDigit)(f)(v.value1), Data_Sequence_Internal.mapmapmap(Data_Lazy.functorLazy)(functorFingerTree)(functorNode)(f)(v.value2), Data_Functor.map(Data_FingerTree_Digit.functorDigit)(f)(v.value3));
          };
          throw new Error("Failed pattern match at Data.FingerTree line 184, column 1 - line 184, column 53: " + [ f.constructor.name, v.constructor.name ]);
      };
  });
  var foldableNode = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return function (xs) {
              return Data_Foldable.foldr(foldableNode)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid))(xs);
          };
      };
  }, function (l) {
      return function (z) {
          return function (v) {
              if (v instanceof Node2) {
                  return l(l(z)(v.value1))(v.value2);
              };
              if (v instanceof Node3) {
                  return l(l(l(z)(v.value1))(v.value2))(v.value3);
              };
              throw new Error("Failed pattern match at Data.FingerTree line 96, column 1 - line 96, column 43: " + [ l.constructor.name, z.constructor.name, v.constructor.name ]);
          };
      };
  }, function (r) {
      return function (z) {
          return function (v) {
              if (v instanceof Node2) {
                  return r(v.value1)(r(v.value2)(z));
              };
              if (v instanceof Node3) {
                  return r(v.value1)(r(v.value2)(r(v.value3)(z)));
              };
              throw new Error("Failed pattern match at Data.FingerTree line 96, column 1 - line 96, column 43: " + [ r.constructor.name, z.constructor.name, v.constructor.name ]);
          };
      };
  });
  var traversableNode = new Data_Traversable.Traversable(function () {
      return foldableNode;
  }, function () {
      return functorNode;
  }, function (dictApplicative) {
      return Data_Traversable.traverse(traversableNode)(dictApplicative)(Control_Category.id(Control_Category.categoryFn));
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              if (v instanceof Node2) {
                  return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Node2.create(v.value0))(f(v.value1)))(f(v.value2));
              };
              if (v instanceof Node3) {
                  return Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Node3.create(v.value0))(f(v.value1)))(f(v.value2)))(f(v.value3));
              };
              throw new Error("Failed pattern match at Data.FingerTree line 103, column 1 - line 103, column 49: " + [ f.constructor.name, v.constructor.name ]);
          };
      };
  });
  var foldableFingerTree = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return function (xs) {
              return Data_Foldable.foldr(foldableFingerTree)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid))(xs);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Empty) {
                  return z;
              };
              if (v1 instanceof Single) {
                  return v(z)(v1.value0);
              };
              if (v1 instanceof Deep) {
                  var leftFold = Data_Foldable.foldl(Data_FingerTree_Digit.foldableDigit)(v);
                  var deepLeftFold = Data_Foldable.foldl(foldableFingerTree)(Data_Foldable.foldl(foldableNode)(v));
                  return leftFold(deepLeftFold(leftFold(z)(v1.value1))(Data_Lazy.force(v1.value2)))(v1.value3);
              };
              throw new Error("Failed pattern match at Data.FingerTree line 189, column 1 - line 189, column 55: " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Empty) {
                  return z;
              };
              if (v1 instanceof Single) {
                  return v(v1.value0)(z);
              };
              if (v1 instanceof Deep) {
                  var flipFoldr$prime = Data_Function.flip(Data_Foldable.foldr(Data_FingerTree_Digit.foldableDigit)(v));
                  var flipFoldr = Data_Function.flip(Data_Foldable.foldr(Data_FingerTree_Digit.foldableDigit)(v));
                  var deepFlipFoldr = Data_Function.flip(Data_Foldable.foldr(foldableFingerTree)(Data_Function.flip(Data_Foldable.foldr(foldableNode)(v))));
                  return flipFoldr$prime(v1.value1)(deepFlipFoldr(Data_Lazy.force(v1.value2))(flipFoldr(v1.value3)(z)));
              };
              throw new Error("Failed pattern match at Data.FingerTree line 189, column 1 - line 189, column 55: " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  });
  var traversableFingerTree = new Data_Traversable.Traversable(function () {
      return foldableFingerTree;
  }, function () {
      return functorFingerTree;
  }, function (dictApplicative) {
      return Data_Traversable.traverse(traversableFingerTree)(dictApplicative)(Control_Category.id(Control_Category.categoryFn));
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              if (v instanceof Empty) {
                  return Control_Applicative.pure(dictApplicative)(Empty.value);
              };
              if (v instanceof Single) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Single.create)(f(v.value0));
              };
              if (v instanceof Deep) {
                  var l = Data_Traversable.traverse(traversableFingerTree)(dictApplicative)(Data_Traversable.traverse(traversableNode)(dictApplicative)(f))(Data_Lazy.force(v.value2));
                  var kl = Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Function["const"])(l);
                  return Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Deep.create(v.value0))(Data_Traversable.traverse(Data_FingerTree_Digit.traversableDigit)(dictApplicative)(f)(v.value1)))(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Lazy.defer)(kl)))(Data_Traversable.traverse(Data_FingerTree_Digit.traversableDigit)(dictApplicative)(f)(v.value3));
              };
              throw new Error("Failed pattern match at Data.FingerTree line 216, column 1 - line 216, column 61: " + [ f.constructor.name, v.constructor.name ]);
          };
      };
  });
  var deep = function (dictMonoid) {
      return function (dictMeasured) {
          return function (pr) {
              return function (m) {
                  return function (sf) {
                      return new Deep(Data_Lazy.defer(function (v) {
                          return Data_Semigroup.append(dictMonoid.Semigroup0())(Data_Sequence_Internal.measure(Data_FingerTree_Digit.measuredDigit(dictMonoid)(dictMeasured))(pr))(Data_Semigroup.append(dictMonoid.Semigroup0())(Data_Sequence_Internal.measure(Data_Sequence_Internal.measuredLazy(dictMonoid)(measuredFingerTree(dictMonoid)(measuredNode)))(m))(Data_Sequence_Internal.measure(Data_FingerTree_Digit.measuredDigit(dictMonoid)(dictMeasured))(sf)));
                      }), pr, m, sf);
                  };
              };
          };
      };
  };
  var snoc = function (dictMonoid) {
      return function (dictMeasured) {
          return function (v) {
              return function (a) {
                  if (v instanceof Empty) {
                      return new Single(a);
                  };
                  if (v instanceof Single) {
                      return deep(dictMonoid)(dictMeasured)(Data_FingerTree_Digit.mkDigit1(v.value0))(lazyEmpty)(Data_FingerTree_Digit.mkDigit1(a));
                  };
                  if (v instanceof Deep) {
                      var v1 = Data_FingerTree_Digit.runDigit(v.value3);
                      if (v1.length === 4) {
                          var forcedM = Data_Lazy.force(v.value2);
                          return deep(dictMonoid)(dictMeasured)(v.value1)(Data_Lazy.defer(function (v2) {
                              return snoc(dictMonoid)(measuredNode)(forcedM)(node3(dictMonoid)(dictMeasured)(v1[0])(v1[1])(v1[2]));
                          }))(Data_FingerTree_Digit.mkDigit2(v1[3])(a));
                      };
                      return deep(dictMonoid)(dictMeasured)(v.value1)(v.value2)(Data_FingerTree_Digit.snocDigit()(v.value3)(a));
                  };
                  throw new Error("Failed pattern match at Data.FingerTree line 263, column 1 - line 264, column 40: " + [ v.constructor.name, a.constructor.name ]);
              };
          };
      };
  };
  var snocAll = function (dictMonoid) {
      return function (dictMeasured) {
          return function (dictFoldable) {
              return Data_Foldable.foldl(dictFoldable)(snoc(dictMonoid)(dictMeasured));
          };
      };
  };
  var toFingerTree = function (dictMonoid) {
      return function (dictMeasured) {
          return function (dictFoldable) {
              return function (s) {
                  return snocAll(dictMonoid)(dictMeasured)(dictFoldable)(Empty.value)(s);
              };
          };
      };
  };
  var viewL = function (dictMonoid) {
      return function (dictMeasured) {
          return function (v) {
              if (v instanceof Empty) {
                  return NilL.value;
              };
              if (v instanceof Single) {
                  return new ConsL(v.value0, lazyEmpty);
              };
              if (v instanceof Deep) {
                  return new ConsL(Data_FingerTree_Digit.headDigit(v.value1), Data_Lazy.defer(function (v1) {
                      return deepL(dictMonoid)(dictMeasured)(Data_FingerTree_Digit.tailDigit(v.value1))(v.value2)(v.value3);
                  }));
              };
              throw new Error("Failed pattern match at Data.FingerTree line 295, column 1 - line 296, column 50: " + [ v.constructor.name ]);
          };
      };
  };
  var deepL = function (dictMonoid) {
      return function (dictMeasured) {
          return function (pr$prime) {
              return function (m) {
                  return function (sf) {
                      var v = Data_FingerTree_Digit.mkDigitMay(pr$prime);
                      if (v instanceof Data_Maybe.Just) {
                          return deep(dictMonoid)(dictMeasured)(v.value0)(m)(sf);
                      };
                      if (v instanceof Data_Maybe.Nothing) {
                          var v1 = viewL(dictMonoid)(measuredNode)(Data_Lazy.force(m));
                          if (v1 instanceof NilL) {
                              return toFingerTree(dictMonoid)(dictMeasured)(Data_FingerTree_Digit.foldableDigit)(sf);
                          };
                          if (v1 instanceof ConsL) {
                              return deep(dictMonoid)(dictMeasured)(nodeToDigit(v1.value0))(v1.value1)(sf);
                          };
                          throw new Error("Failed pattern match at Data.FingerTree line 322, column 7 - line 324, column 49: " + [ v1.constructor.name ]);
                      };
                      throw new Error("Failed pattern match at Data.FingerTree line 318, column 3 - line 324, column 49: " + [ v.constructor.name ]);
                  };
              };
          };
      };
  };
  var viewR = function (dictMonoid) {
      return function (dictMeasured) {
          return function (v) {
              if (v instanceof Empty) {
                  return NilR.value;
              };
              if (v instanceof Single) {
                  return new SnocR(lazyEmpty, v.value0);
              };
              if (v instanceof Deep) {
                  return new SnocR(Data_Lazy.defer(function (v1) {
                      return deepR(dictMonoid)(dictMeasured)(v.value1)(v.value2)(Data_FingerTree_Digit.initDigit(v.value3));
                  }), Data_FingerTree_Digit.lastDigit(v.value3));
              };
              throw new Error("Failed pattern match at Data.FingerTree line 344, column 1 - line 345, column 50: " + [ v.constructor.name ]);
          };
      };
  };
  var deepR = function (dictMonoid) {
      return function (dictMeasured) {
          return function (pr) {
              return function (m) {
                  return function (sf$prime) {
                      var v = Data_FingerTree_Digit.mkDigitMay(sf$prime);
                      if (v instanceof Data_Maybe.Just) {
                          return deep(dictMonoid)(dictMeasured)(pr)(m)(v.value0);
                      };
                      if (v instanceof Data_Maybe.Nothing) {
                          var v1 = viewR(dictMonoid)(measuredNode)(Data_Lazy.force(m));
                          if (v1 instanceof NilR) {
                              return toFingerTree(dictMonoid)(dictMeasured)(Data_FingerTree_Digit.foldableDigit)(pr);
                          };
                          if (v1 instanceof SnocR) {
                              return deep(dictMonoid)(dictMeasured)(pr)(v1.value0)(nodeToDigit(v1.value1));
                          };
                          throw new Error("Failed pattern match at Data.FingerTree line 358, column 7 - line 360, column 49: " + [ v1.constructor.name ]);
                      };
                      throw new Error("Failed pattern match at Data.FingerTree line 354, column 3 - line 360, column 49: " + [ v.constructor.name ]);
                  };
              };
          };
      };
  };
  var splitTree = function (dictMonoid) {
      return function (dictMeasured) {
          return function (dictPartial) {
              return function (v) {
                  return function (v1) {
                      return function (v2) {
                          if (v2 instanceof Single) {
                              return new LazySplit(lazyEmpty, v2.value0, lazyEmpty);
                          };
                          if (v2 instanceof Empty) {
                              return Partial.crashWith(dictPartial)("Data.FingerTree.splitTree: Empty");
                          };
                          if (v2 instanceof Deep) {
                              var vpr = Data_Semigroup.append(dictMonoid.Semigroup0())(v1)(Data_Sequence_Internal.measure(Data_FingerTree_Digit.measuredDigit(dictMonoid)(dictMeasured))(v2.value1));
                              var $351 = v(vpr);
                              if ($351) {
                                  var v3 = splitDigit(dictMonoid)(dictMeasured)(v)(v1)(v2.value1);
                                  return new LazySplit(Data_Lazy.defer(function (v4) {
                                      return toFingerTree(dictMonoid)(dictMeasured)(Data_Foldable.foldableArray)(v3.value0);
                                  }), v3.value1, Data_Lazy.defer(function (v4) {
                                      return deepL(dictMonoid)(dictMeasured)(v3.value2)(v2.value2)(v2.value3);
                                  }));
                              };
                              var vm = Data_Semigroup.append(dictMonoid.Semigroup0())(vpr)(Data_Sequence_Internal.measure(Data_Sequence_Internal.measuredLazy(dictMonoid)(measuredFingerTree(dictMonoid)(measuredNode)))(v2.value2));
                              var $356 = v(vm);
                              if ($356) {
                                  var v3 = splitTree(dictMonoid)(measuredNode)(dictPartial)(v)(vpr)(Data_Lazy.force(v2.value2));
                                  var v4 = splitDigit(dictMonoid)(dictMeasured)(v)(Data_Semigroup.append(dictMonoid.Semigroup0())(vpr)(Data_Sequence_Internal.measure(Data_Sequence_Internal.measuredLazy(dictMonoid)(measuredFingerTree(dictMonoid)(measuredNode)))(v3.value0)))(nodeToDigit(v3.value1));
                                  return new LazySplit(Data_Lazy.defer(function (v5) {
                                      return deepR(dictMonoid)(dictMeasured)(v2.value1)(v3.value0)(v4.value0);
                                  }), v4.value1, Data_Lazy.defer(function (v5) {
                                      return deepL(dictMonoid)(dictMeasured)(v4.value2)(v3.value2)(v2.value3);
                                  }));
                              };
                              var v3 = splitDigit(dictMonoid)(dictMeasured)(v)(vm)(v2.value3);
                              return new LazySplit(Data_Lazy.defer(function (v4) {
                                  return deepR(dictMonoid)(dictMeasured)(v2.value1)(v2.value2)(v3.value0);
                              }), v3.value1, Data_Lazy.defer(function (v4) {
                                  return toFingerTree(dictMonoid)(dictMeasured)(Data_Foldable.foldableArray)(v3.value2);
                              }));
                          };
                          throw new Error("Failed pattern match at Data.FingerTree line 429, column 1 - line 430, column 70: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
                      };
                  };
              };
          };
      };
  };
  var cons = function (dictMonoid) {
      return function (dictMeasured) {
          return function (a) {
              return function (v) {
                  if (v instanceof Empty) {
                      return new Single(a);
                  };
                  if (v instanceof Single) {
                      return deep(dictMonoid)(dictMeasured)(Data_FingerTree_Digit.mkDigit1(a))(lazyEmpty)(Data_FingerTree_Digit.mkDigit1(v.value0));
                  };
                  if (v instanceof Deep) {
                      var v1 = Data_FingerTree_Digit.runDigit(v.value1);
                      if (v1.length === 4) {
                          var forcedM = Data_Lazy.force(v.value2);
                          return deep(dictMonoid)(dictMeasured)(Data_FingerTree_Digit.mkDigit2(a)(v1[0]))(Data_Lazy.defer(function (v2) {
                              return cons(dictMonoid)(measuredNode)(node3(dictMonoid)(dictMeasured)(v1[1])(v1[2])(v1[3]))(forcedM);
                          }))(v.value3);
                      };
                      var pr$prime = Data_FingerTree_Digit.consDigit()(a)(v.value1);
                      return deep(dictMonoid)(dictMeasured)(pr$prime)(v.value2)(v.value3);
                  };
                  throw new Error("Failed pattern match at Data.FingerTree line 235, column 1 - line 236, column 40: " + [ a.constructor.name, v.constructor.name ]);
              };
          };
      };
  };
  var consAll = function (dictMonoid) {
      return function (dictMeasured) {
          return function (dictFoldable) {
              return Data_Function.flip(Data_Foldable.foldr(dictFoldable)(cons(dictMonoid)(dictMeasured)));
          };
      };
  };
  var split = function (dictMonoid) {
      return function (dictMeasured) {
          return function (dictPartial) {
              return function (p) {
                  return function (v) {
                      if (v instanceof Empty) {
                          return new Data_Tuple.Tuple(lazyEmpty, lazyEmpty);
                      };
                      var $388 = p(Data_Sequence_Internal.measure(measuredFingerTree(dictMonoid)(dictMeasured))(v));
                      if ($388) {
                          var v1 = splitTree(dictMonoid)(dictMeasured)(dictPartial)(p)(Data_Monoid.mempty(dictMonoid))(v);
                          return new Data_Tuple.Tuple(v1.value0, Data_Lazy.defer(function (v2) {
                              return cons(dictMonoid)(dictMeasured)(v1.value1)(Data_Lazy.force(v1.value2));
                          }));
                      };
                      return new Data_Tuple.Tuple(Data_Lazy.defer(function (v1) {
                          return v;
                      }), lazyEmpty);
                  };
              };
          };
      };
  };
  var app3 = function (dictMonoid) {
      return function (dictMeasured) {
          return function (v) {
              return function (ts) {
                  return function (v1) {
                      if (v instanceof Empty) {
                          return consAll(dictMonoid)(dictMeasured)(Data_Foldable.foldableArray)(ts)(v1);
                      };
                      if (v1 instanceof Empty) {
                          return snocAll(dictMonoid)(dictMeasured)(Data_Foldable.foldableArray)(v)(ts);
                      };
                      if (v instanceof Single) {
                          return cons(dictMonoid)(dictMeasured)(v.value0)(consAll(dictMonoid)(dictMeasured)(Data_Foldable.foldableArray)(ts)(v1));
                      };
                      if (v1 instanceof Single) {
                          return snoc(dictMonoid)(dictMeasured)(snocAll(dictMonoid)(dictMeasured)(Data_Foldable.foldableArray)(v)(ts))(v1.value0);
                      };
                      if (v instanceof Deep && v1 instanceof Deep) {
                          var computeM$prime = function (v2) {
                              return app3(dictMonoid)(measuredNode)(Data_Lazy.force(v.value2))(nodes(dictMonoid)(dictMeasured)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_FingerTree_Digit.runDigit(v.value3))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(ts)(Data_FingerTree_Digit.runDigit(v1.value1)))))(Data_Lazy.force(v1.value2));
                          };
                          return deep(dictMonoid)(dictMeasured)(v.value1)(Data_Lazy.defer(computeM$prime))(v1.value3);
                      };
                      throw new Error("Failed pattern match at Data.FingerTree line 373, column 1 - line 374, column 70: " + [ v.constructor.name, ts.constructor.name, v1.constructor.name ]);
                  };
              };
          };
      };
  };
  var append = function (dictMonoid) {
      return function (dictMeasured) {
          return function (xs) {
              return function (ys) {
                  return app3(dictMonoid)(dictMeasured)(xs)([  ])(ys);
              };
          };
      };
  };
  exports["Node2"] = Node2;
  exports["Node3"] = Node3;
  exports["node2"] = node2;
  exports["node3"] = node3;
  exports["nodeToDigit"] = nodeToDigit;
  exports["Empty"] = Empty;
  exports["Single"] = Single;
  exports["Deep"] = Deep;
  exports["lazyEmpty"] = lazyEmpty;
  exports["deep"] = deep;
  exports["cons"] = cons;
  exports["snoc"] = snoc;
  exports["consAll"] = consAll;
  exports["snocAll"] = snocAll;
  exports["toFingerTree"] = toFingerTree;
  exports["NilL"] = NilL;
  exports["ConsL"] = ConsL;
  exports["viewL"] = viewL;
  exports["deepL"] = deepL;
  exports["NilR"] = NilR;
  exports["SnocR"] = SnocR;
  exports["viewR"] = viewR;
  exports["deepR"] = deepR;
  exports["app3"] = app3;
  exports["nodes"] = nodes;
  exports["append"] = append;
  exports["Split"] = Split;
  exports["LazySplit"] = LazySplit;
  exports["splitDigit"] = splitDigit;
  exports["splitTree"] = splitTree;
  exports["split"] = split;
  exports["functorNode"] = functorNode;
  exports["foldableNode"] = foldableNode;
  exports["traversableNode"] = traversableNode;
  exports["measuredNode"] = measuredNode;
  exports["functorFingerTree"] = functorFingerTree;
  exports["foldableFingerTree"] = foldableFingerTree;
  exports["traversableFingerTree"] = traversableFingerTree;
  exports["measuredFingerTree"] = measuredFingerTree;
})(PS["Data.FingerTree"] = PS["Data.FingerTree"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Prelude = PS["Prelude"];        
  var Profunctor = function (dimap) {
      this.dimap = dimap;
  };
  var profunctorFn = new Profunctor(function (a2b) {
      return function (c2d) {
          return function (b2c) {
              return function ($9) {
                  return c2d(b2c(a2b($9)));
              };
          };
      };
  });
  var dimap = function (dict) {
      return dict.dimap;
  };
  exports["dimap"] = dimap;
  exports["Profunctor"] = Profunctor;
  exports["profunctorFn"] = profunctorFn;
})(PS["Data.Profunctor"] = PS["Data.Profunctor"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Profunctor = PS["Data.Profunctor"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];        
  var Strong = function (Profunctor0, first, second) {
      this.Profunctor0 = Profunctor0;
      this.first = first;
      this.second = second;
  };
  var strongFn = new Strong(function () {
      return Data_Profunctor.profunctorFn;
  }, function (a2b) {
      return function (v) {
          return new Data_Tuple.Tuple(a2b(v.value0), v.value1);
      };
  }, Data_Functor.map(Data_Tuple.functorTuple));
  var second = function (dict) {
      return dict.second;
  };
  var first = function (dict) {
      return dict.first;
  };
  var splitStrong = function (dictCategory) {
      return function (dictStrong) {
          return function (l) {
              return function (r) {
                  return Control_Semigroupoid.composeFlipped(dictCategory.Semigroupoid0())(first(dictStrong)(l))(second(dictStrong)(r));
              };
          };
      };
  };
  exports["first"] = first;
  exports["second"] = second;
  exports["Strong"] = Strong;
  exports["splitStrong"] = splitStrong;
  exports["strongFn"] = strongFn;
})(PS["Data.Profunctor.Strong"] = PS["Data.Profunctor.Strong"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_FingerTree = PS["Data.FingerTree"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Lazy = PS["Data.Lazy"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Profunctor_Strong = PS["Data.Profunctor.Strong"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Sequence_Internal = PS["Data.Sequence.Internal"];
  var Data_Sequence_Ordered = PS["Data.Sequence.Ordered"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var unsafeIndex = function (dictPartial) {
      return function (i) {
          return function (v) {
              var v1 = Data_FingerTree.splitTree(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringInt))(Data_Sequence_Internal.measuredElem)(dictPartial)(function (n) {
                  return i < Data_Newtype.unwrap(Data_Monoid_Additive.newtypeAdditive)(n);
              })(0)(v);
              return Data_Sequence_Internal.getElem(v1.value1);
          };
      };
  };
  var unsafeAdjust = function (dictPartial) {
      return function (f) {
          return function (i) {
              return function (v) {
                  var v1 = Data_FingerTree.splitTree(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringInt))(Data_Sequence_Internal.measuredElem)(dictPartial)(function (n) {
                      return i < Data_Newtype.unwrap(Data_Monoid_Additive.newtypeAdditive)(n);
                  })(0)(v);
                  var l$prime = Data_FingerTree.snoc(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringInt))(Data_Sequence_Internal.measuredElem)(Data_Lazy.force(v1.value0))(f(v1.value1));
                  return Data_FingerTree.append(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringInt))(Data_Sequence_Internal.measuredElem)(l$prime)(Data_Lazy.force(v1.value2));
              };
          };
      };
  };
  var splitAt$prime = function (i) {
      return function (v) {
          var tuple = Data_FingerTree.split(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringInt))(Data_Sequence_Internal.measuredElem)()(function (n) {
              return i < Data_Newtype.unwrap(Data_Monoid_Additive.newtypeAdditive)(n);
          })(v);
          var seqify = function (dictFunctor) {
              return Unsafe_Coerce.unsafeCoerce;
          };
          return seqify(Data_Lazy.functorLazy)(tuple);
      };
  };
  var splitAt = function (i) {
      return function (xs) {
          var tuple = splitAt$prime(i)(xs);
          var forceBoth = Data_Profunctor_Strong.splitStrong(Control_Category.categoryFn)(Data_Profunctor_Strong.strongFn)(Data_Lazy.force)(Data_Lazy.force);
          return forceBoth(tuple);
      };
  };
  var snoc = function (v) {
      return function (x) {
          return Data_FingerTree.snoc(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringInt))(Data_Sequence_Internal.measuredElem)(v)(x);
      };
  };
  var mapSeq = function (dictFunctor) {
      return Unsafe_Coerce.unsafeCoerce;
  };
  var map = function (f) {
      return function (v) {
          return Data_Functor.map(Data_FingerTree.functorFingerTree)(f)(v);
      };
  };
  var length = function (v) {
      return Data_Newtype.un(Data_Monoid_Additive.newtypeAdditive)(Data_Monoid_Additive.Additive)(Data_Sequence_Internal.measure(Data_FingerTree.measuredFingerTree(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringInt))(Data_Sequence_Internal.measuredElem))(v));
  };
  var inBounds = function (i) {
      return function (seq) {
          return 0 <= i && i < length(seq);
      };
  };
  var index = function (i) {
      return function (xs) {
          var $83 = inBounds(i)(xs);
          if ($83) {
              return Data_Maybe.Just.create(unsafeIndex()(i)(xs));
          };
          return Data_Maybe.Nothing.value;
      };
  };
  var functorSeq = new Data_Functor.Functor(map);
  var foldableSeq = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return Data_Foldable.foldMap(Data_FingerTree.foldableFingerTree)(dictMonoid)(Data_Sequence_Internal.liftElem(f))(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return Data_Foldable.foldl(Data_FingerTree.foldableFingerTree)(Data_Sequence_Internal.lift2Elem(f))(z)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return Data_Foldable.foldr(Data_FingerTree.foldableFingerTree)(Data_Sequence_Internal.liftElem(f))(z)(v);
          };
      };
  });
  var traversableSeq = new Data_Traversable.Traversable(function () {
      return foldableSeq;
  }, function () {
      return functorSeq;
  }, function (dictApplicative) {
      return Data_Traversable.traverse(traversableSeq)(dictApplicative)(Control_Category.id(Control_Category.categoryFn));
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return mapSeq((dictApplicative.Apply0()).Functor0())(Data_Traversable.traverse(Data_FingerTree.traversableFingerTree)(dictApplicative)(Data_Traversable.traverse(Data_Sequence_Internal.traversableElem)(dictApplicative)(f))(v));
          };
      };
  });
  var empty = Data_FingerTree.Empty.value;
  var cons = function (x) {
      return function (v) {
          return Data_FingerTree.cons(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringInt))(Data_Sequence_Internal.measuredElem)(x)(v);
      };
  };
  var unfoldableSeq = new Data_Unfoldable.Unfoldable(function (f) {
      return function (xs) {
          var v = f(xs);
          if (v instanceof Data_Maybe.Just) {
              return cons(v.value0.value0)(Data_Unfoldable.unfoldr(unfoldableSeq)(f)(v.value0.value1));
          };
          if (v instanceof Data_Maybe.Nothing) {
              return empty;
          };
          throw new Error("Failed pattern match at Data.Sequence line 126, column 18 - line 128, column 45: " + [ v.constructor.name ]);
      };
  });
  var append = function (v) {
      return function (v1) {
          return Data_FingerTree.append(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringInt))(Data_Sequence_Internal.measuredElem)(v)(v1);
      };
  }; 
  var adjust = function (f) {
      return function (i) {
          return function (xs) {
              var $110 = inBounds(i)(xs);
              if ($110) {
                  return unsafeAdjust()(f)(i)(xs);
              };
              return xs;
          };
      };
  };
  var replace = function (x) {
      return adjust(Data_Function["const"](x));
  };
  exports["empty"] = empty;
  exports["cons"] = cons;
  exports["snoc"] = snoc;
  exports["append"] = append;
  exports["map"] = map;
  exports["length"] = length;
  exports["inBounds"] = inBounds;
  exports["splitAt"] = splitAt;
  exports["index"] = index;
  exports["adjust"] = adjust;
  exports["replace"] = replace;
  exports["foldableSeq"] = foldableSeq;
  exports["traversableSeq"] = traversableSeq;
  exports["unfoldableSeq"] = unfoldableSeq;
  exports["functorSeq"] = functorSeq;
})(PS["Data.Sequence"] = PS["Data.Sequence"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Data_Array = PS["Data.Array"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Sequence = PS["Data.Sequence"];
  var Data_Show = PS["Data.Show"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Prelude = PS["Prelude"];
  var Board = (function () {
      function Board(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Board.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Board(value0, value1, value2);
              };
          };
      };
      return Board;
  })();
  var toIndex = function (coord) {
      return function (v) {
          return (v * coord.y | 0) + coord.x | 0;
      };
  };
  var toCoord = function (i) {
      return function (v) {
          return {
              x: i % v,
              y: i / v | 0
          };
      };
  };
  var showCell = function (v) {
      if (v) {
          return "x";
      };
      if (!v) {
          return "-";
      };
      throw new Error("Failed pattern match at Game line 22, column 1 - line 22, column 30: " + [ v.constructor.name ]);
  };
  var showRow = function (xs) {
      return Data_Foldable.foldl(Data_Sequence.foldableSeq)(function (acc) {
          return function (x) {
              return acc + (showCell(x) + " ");
          };
      })("")(xs);
  };
  var setCell = function (v) {
      return function (coord) {
          return function (value) {
              var updatedCells = Data_Sequence.replace(value)(toIndex(coord)(v.value0))(v.value2);
              return new Board(v.value0, v.value1, updatedCells);
          };
      };
  };
  var rows = function (v) {
      var chunks = function (v1) {
          return function (xs) {
              if (Data_Sequence.length(xs) === 0) {
                  return Data_Sequence.empty;
              };
              var v2 = Data_Sequence.splitAt(v1)(xs);
              return Data_Sequence.cons(v2.value0)(chunks(v1)(v2.value1));
          };
      };
      return chunks(v.value0)(v.value2);
  };
  var showBoard = new Data_Show.Show(function (board) {
      var rs = rows(board);
      return Data_Foldable.foldl(Data_Sequence.foldableSeq)(function (acc) {
          return function (row) {
              return acc + (showRow(row) + "\x0a");
          };
      })("")(rs);
  });
  var mkEmptyBoard = function (v) {
      return function (v1) {
          return new Board(v, v1, Data_Unfoldable.replicate(Data_Sequence.unfoldableSeq)(v * v1 | 0)(false));
      };
  };
  var mapWithIndex = function (f) {
      return function (xs) {
          var z = new Data_Tuple.Tuple(Data_Sequence.empty, 0);
          var g = function (v) {
              return function (x) {
                  return new Data_Tuple.Tuple(Data_Sequence.snoc(v.value0)(f(v.value1)(x)), v.value1 + 1 | 0);
              };
          };
          return Data_Tuple.fst(Data_Foldable.foldl(Data_Sequence.foldableSeq)(g)(z)(xs));
      };
  };
  var getCell = function (v) {
      return function (c) {
          var $43 = c.x < 0 || (c.x >= v.value0 || (c.y < 0 || c.y >= v.value1));
          if ($43) {
              return Data_Maybe.Nothing.value;
          };
          return Data_Sequence.index(toIndex(c)(v.value0))(v.value2);
      };
  };
  var countLiveNeighbours = function (v) {
      return function (c) {
          var neighbours = [ {
              x: c.x - 1 | 0,
              y: c.y - 1 | 0
          }, {
              x: c.x,
              y: c.y - 1 | 0
          }, {
              x: c.x + 1 | 0,
              y: c.y - 1 | 0
          }, {
              x: c.x - 1 | 0,
              y: c.y
          }, {
              x: c.x + 1 | 0,
              y: c.y
          }, {
              x: c.x - 1 | 0,
              y: c.y + 1 | 0
          }, {
              x: c.x,
              y: c.y + 1 | 0
          }, {
              x: c.x + 1 | 0,
              y: c.y + 1 | 0
          } ];
          return Data_Array.length(Data_Array.filter(Control_Category.id(Control_Category.categoryFn))(Data_Array.mapMaybe(getCell(v))(neighbours)));
      };
  };
  var applyRules = function (v) {
      return function (i) {
          return function (cell) {
              var n = countLiveNeighbours(v)(toCoord(i)(v.value0));
              var v1 = new Data_Tuple.Tuple(cell, n);
              if (!v1.value0 && v1.value1 === 3) {
                  return true;
              };
              if (v1.value0 && v1.value1 === 2) {
                  return true;
              };
              if (v1.value0 && v1.value1 === 3) {
                  return true;
              };
              if (v1.value0) {
                  return false;
              };
              if (!v1.value0) {
                  return false;
              };
              throw new Error("Failed pattern match at Game line 82, column 3 - line 87, column 27: " + [ v1.constructor.name ]);
          };
      };
  };
  var iterate = function (v) {
      var iterateCells = mapWithIndex(applyRules(v))(v.value2);
      return new Board(v.value0, v.value1, iterateCells);
  };
  exports["Board"] = Board;
  exports["showCell"] = showCell;
  exports["showRow"] = showRow;
  exports["rows"] = rows;
  exports["mkEmptyBoard"] = mkEmptyBoard;
  exports["getCell"] = getCell;
  exports["setCell"] = setCell;
  exports["toIndex"] = toIndex;
  exports["toCoord"] = toCoord;
  exports["iterate"] = iterate;
  exports["applyRules"] = applyRules;
  exports["countLiveNeighbours"] = countLiveNeighbours;
  exports["mapWithIndex"] = mapWithIndex;
  exports["showBoard"] = showBoard;
})(PS["Game"] = PS["Game"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.getCanvasElementByIdImpl = function(id, Just, Nothing) {
      return function() {
          var el = document.getElementById(id);
          if (el && el instanceof HTMLCanvasElement) {
              return Just(el);
          } else {
              return Nothing;
          }
      };
  };

  exports.getContext2D = function(c) {
      return function() {
          return c.getContext('2d');
      };
  };

  exports.setFillStyle = function(style) {
      return function(ctx) {
          return function() {
              ctx.fillStyle = style;
              return ctx;
          };
      };
  };

  exports.fillRect = function(ctx) {
      return function(r) {
          return function() {
              ctx.fillRect(r.x, r.y, r.w, r.h);
              return ctx;
          };
      };
  };

  exports.strokeRect = function(ctx) {
      return function(r) {
          return function() {
              ctx.strokeRect(r.x, r.y, r.w, r.h);
              return ctx;
          };
      };
  };
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Graphics.Canvas"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception_Unsafe = PS["Control.Monad.Eff.Exception.Unsafe"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_ArrayBuffer_Types = PS["Data.ArrayBuffer.Types"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];
  var getCanvasElementById = function (elId) {
      return $foreign.getCanvasElementByIdImpl(elId, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
  };
  exports["getCanvasElementById"] = getCanvasElementById;
  exports["getContext2D"] = $foreign.getContext2D;
  exports["setFillStyle"] = $foreign.setFillStyle;
  exports["fillRect"] = $foreign.fillRect;
  exports["strokeRect"] = $foreign.strokeRect;
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Function = PS["Data.Function"];
  var Data_Int = PS["Data.Int"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Sequence = PS["Data.Sequence"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Game = PS["Game"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var Prelude = PS["Prelude"];        
  var canvasWidth = 680;
  var canvasHeight = 680;
  var coordToRectangle = function (v) {
      return function (coord) {
          return {
              x: Data_Int.toNumber(coord.x * (canvasWidth / v.value0 | 0) | 0),
              y: Data_Int.toNumber(coord.y * (canvasHeight / v.value1 | 0) | 0),
              w: Data_Int.toNumber(canvasWidth / v.value0 | 0),
              h: Data_Int.toNumber(canvasHeight / v.value1 | 0)
          };
      };
  };
  var paintCell = function (ctx) {
      return function (board) {
          return function (coord) {
              return function (v) {
                  if (v) {
                      return function __do() {
                          var v1 = Graphics_Canvas.setFillStyle("#000000")(ctx)();
                          var v2 = Graphics_Canvas.fillRect(ctx)(coordToRectangle(board)(coord))();
                          return Data_Unit.unit;
                      };
                  };
                  if (!v) {
                      return function __do() {
                          var v1 = Graphics_Canvas.setFillStyle("#ffffff")(ctx)();
                          var v2 = Graphics_Canvas.fillRect(ctx)(coordToRectangle(board)(coord))();
                          var v3 = Graphics_Canvas.strokeRect(ctx)(coordToRectangle(board)(coord))();
                          return Data_Unit.unit;
                      };
                  };
                  throw new Error("Failed pattern match at CanvasView line 27, column 1 - line 27, column 97: " + [ ctx.constructor.name, board.constructor.name, coord.constructor.name, v.constructor.name ]);
              };
          };
      };
  };
  var paintBoard = function (ctx) {
      return function (v) {
          var cellsWithCoords = Game.mapWithIndex(function (i) {
              return function (c) {
                  return new Data_Tuple.Tuple(Game.toCoord(i)(v.value0), c);
              };
          })(v.value2);
          return function __do() {
              var v1 = Data_Traversable.traverse(Data_Sequence.traversableSeq)(Control_Monad_Eff.applicativeEff)(function (v1) {
                  return paintCell(ctx)(v)(v1.value0)(v1.value1);
              })(cellsWithCoords)();
              return Data_Unit.unit;
          };
      };
  };
  exports["canvasWidth"] = canvasWidth;
  exports["canvasHeight"] = canvasHeight;
  exports["paintBoard"] = paintBoard;
  exports["paintCell"] = paintCell;
  exports["coordToRectangle"] = coordToRectangle;
})(PS["CanvasView"] = PS["CanvasView"] || {});
(function(exports) {
    "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
      return {};
    };
  };
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  exports["log"] = $foreign.log;
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {// module Signal

  function make(initial) {
    var subs = [];
    var val = initial;
    var sig = {
      subscribe: function(sub) {
        subs.push(sub);
        sub(val);
      },
      get: function() { return val; },
      set: function(newval) {
        val = newval;
        subs.forEach(function(sub) { sub(newval); });
      }
    };
    return sig;
  };

  exports.constant = make;

  exports.mapSig = function(fun) {
    return function(sig) {
      var out = make(fun(sig.get()));
      sig.subscribe(function(val) { out.set(fun(val)); });
      return out;
    };
  };

  exports.foldp = function(fun) {
    return function(seed) {
      return function(sig) {
        var acc = seed;
        var out = make(acc);
        sig.subscribe(function(val) {
          acc = fun(val)(acc);
          out.set(acc);
        });
        return out;
      };
    };
  };

  exports.runSignal =
    function runSignal(sig) {
      return function() {
        sig.subscribe(function(val) {
          val();
        });
        return {};
      };
    };
})(PS["Signal"] = PS["Signal"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Signal"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Prelude = PS["Prelude"];
  var functorSignal = new Data_Functor.Functor($foreign.mapSig);
  var flippedMap = function (dictFunctor) {
      return Data_Function.flip(Data_Functor.map(dictFunctor));
  };
  exports["flippedMap"] = flippedMap;
  exports["functorSignal"] = functorSignal;
  exports["constant"] = $foreign.constant;
  exports["foldp"] = $foreign.foldp;
  exports["runSignal"] = $foreign.runSignal;
})(PS["Signal"] = PS["Signal"] || {});
(function(exports) {// module Signal.Time

  function now() {
    var perf = typeof performance !== 'undefined' ? performance : null,
        proc = typeof process !== 'undefined' ? process : null;
    return (
      perf && (perf.now || perf.webkitNow || perf.msNow || perf.oNow || perf.mozNow) ||
      (proc && proc.hrtime && function() {
        var t = proc.hrtime();
        return (t[0] * 1e9 + t[1]) / 1e6;
      }) ||
      Date.now
    ).call(perf);
  };

  exports.now = now;

  exports.everyP = function everyP(constant) {
    return function(t) {
      var out = constant(now());
      setInterval(function() {
        out.set(now());
      }, t);
      return out;
    };
  };
})(PS["Signal.Time"] = PS["Signal.Time"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Signal.Time"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Timer = PS["Control.Monad.Eff.Timer"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Prelude = PS["Prelude"];
  var Signal = PS["Signal"];                   
  var second = 1000.0;  
  var every = $foreign.everyP(Signal.constant);
  exports["every"] = every;
  exports["second"] = second;
})(PS["Signal.Time"] = PS["Signal.Time"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var CanvasView = PS["CanvasView"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Show = PS["Data.Show"];
  var Game = PS["Game"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var Prelude = PS["Prelude"];
  var Signal = PS["Signal"];
  var Signal_Time = PS["Signal.Time"];        
  var initialBoard = (function () {
      var setCell$prime = function (coord) {
          return function (board) {
              return Game.setCell(board)(coord)(true);
          };
      };
      var emptyBoard = Game.mkEmptyBoard(17)(17);
      return setCell$prime({
          x: 4,
          y: 2
      })(setCell$prime({
          x: 5,
          y: 2
      })(setCell$prime({
          x: 6,
          y: 2
      })(setCell$prime({
          x: 10,
          y: 2
      })(setCell$prime({
          x: 11,
          y: 2
      })(setCell$prime({
          x: 12,
          y: 2
      })(setCell$prime({
          x: 2,
          y: 4
      })(setCell$prime({
          x: 7,
          y: 4
      })(setCell$prime({
          x: 9,
          y: 4
      })(setCell$prime({
          x: 14,
          y: 4
      })(setCell$prime({
          x: 2,
          y: 5
      })(setCell$prime({
          x: 7,
          y: 5
      })(setCell$prime({
          x: 9,
          y: 5
      })(setCell$prime({
          x: 14,
          y: 5
      })(setCell$prime({
          x: 2,
          y: 6
      })(setCell$prime({
          x: 7,
          y: 6
      })(setCell$prime({
          x: 9,
          y: 6
      })(setCell$prime({
          x: 14,
          y: 6
      })(setCell$prime({
          x: 4,
          y: 7
      })(setCell$prime({
          x: 5,
          y: 7
      })(setCell$prime({
          x: 6,
          y: 7
      })(setCell$prime({
          x: 10,
          y: 7
      })(setCell$prime({
          x: 11,
          y: 7
      })(setCell$prime({
          x: 12,
          y: 7
      })(setCell$prime({
          x: 4,
          y: 9
      })(setCell$prime({
          x: 5,
          y: 9
      })(setCell$prime({
          x: 6,
          y: 9
      })(setCell$prime({
          x: 10,
          y: 9
      })(setCell$prime({
          x: 11,
          y: 9
      })(setCell$prime({
          x: 12,
          y: 9
      })(setCell$prime({
          x: 2,
          y: 10
      })(setCell$prime({
          x: 7,
          y: 10
      })(setCell$prime({
          x: 9,
          y: 10
      })(setCell$prime({
          x: 14,
          y: 10
      })(setCell$prime({
          x: 2,
          y: 11
      })(setCell$prime({
          x: 7,
          y: 11
      })(setCell$prime({
          x: 9,
          y: 11
      })(setCell$prime({
          x: 14,
          y: 11
      })(setCell$prime({
          x: 2,
          y: 12
      })(setCell$prime({
          x: 7,
          y: 12
      })(setCell$prime({
          x: 9,
          y: 12
      })(setCell$prime({
          x: 14,
          y: 12
      })(setCell$prime({
          x: 4,
          y: 14
      })(setCell$prime({
          x: 5,
          y: 14
      })(setCell$prime({
          x: 6,
          y: 14
      })(setCell$prime({
          x: 10,
          y: 14
      })(setCell$prime({
          x: 11,
          y: 14
      })(setCell$prime({
          x: 12,
          y: 14
      })(emptyBoard))))))))))))))))))))))))))))))))))))))))))))))));
  })();
  var run = function (canvas) {
      return function __do() {
          var v = Graphics_Canvas.getContext2D(canvas)();
          var v1 = Control_Monad_Eff_Console.log(Data_Show.show(Game.showBoard)(initialBoard))();
          return Signal.runSignal(Signal.flippedMap(Signal.functorSignal)(Signal.foldp(function (v2) {
              return Game.iterate;
          })(initialBoard)(Signal_Time.every(Signal_Time.second)))(CanvasView.paintBoard(v)))();
      };
  };
  var displayError = Control_Monad_Eff_Console.log("Looks like your browser doesn't support Canvas");
  var main = function __do() {
      var v = Graphics_Canvas.getCanvasElementById("game")();
      if (v instanceof Data_Maybe.Just) {
          return run(v.value0)();
      };
      if (v instanceof Data_Maybe.Nothing) {
          return displayError();
      };
      throw new Error("Failed pattern match at Main line 17, column 3 - line 19, column 28: " + [ v.constructor.name ]);
  };
  exports["main"] = main;
  exports["run"] = run;
  exports["initialBoard"] = initialBoard;
  exports["displayError"] = displayError;
})(PS["Main"] = PS["Main"] || {});
PS["Main"].main();
